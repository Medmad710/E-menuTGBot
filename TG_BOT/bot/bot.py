import asyncpg
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.client.bot import DefaultBotProperties
from aiogram.utils.keyboard import InlineKeyboardBuilder
import asyncio

# # # –¢–æ–∫–µ–Ω –ù–∞—Å—Ç–æ—è—â–µ–≥–æ –±–æ—Ç–∞
API_TOKEN = "7560925634:AAEOwzxMM_j9gi2rE72kWaNNAMoS4TkFSkI"



# –ë–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤
# API_TOKEN = "7802809540:AAFC8kFdP22BP4Q5sA3e839paZUhMFZgX4Y"
 # #

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

DB_USER = 'cafe_user'
DB_PASSWORD = 'secure_password'
DB_NAME = 'cafe_db'
DB_HOST = 'db'  

db_pool = None
chef_chat_id = None
user_carts = {}

async def create_db_pool():
    return await asyncpg.create_pool(
        user=DB_USER, password=DB_PASSWORD, database=DB_NAME, host=DB_HOST, port='5432'
    )

async def get_categories():
    async with db_pool.acquire() as connection:
        return await connection.fetch("SELECT DISTINCT category FROM menu")

async def get_dishes_by_category(category):
    async with db_pool.acquire() as connection:
        return await connection.fetch("SELECT item_id, name, price FROM menu WHERE category = $1", category)

async def save_order(customer_id, menu_item_id, order_price):
    async with db_pool.acquire() as connection:
        await connection.execute(
            "INSERT INTO orders (customer_id, menu_item_id, order_price) VALUES ($1, $2, $3)",
            customer_id, menu_item_id, order_price
        )

async def save_user(telegram_id):
    async with db_pool.acquire() as connection:
        existing_user = await connection.fetchrow("SELECT * FROM customers WHERE telegram_id = $1", telegram_id)
        if not existing_user:
            await connection.execute(
                "INSERT INTO customers (telegram_id) VALUES ($1)",
                telegram_id
            )



##########################################################################################################################



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_command(message: Message):
    categories = await get_categories()
    keyboard = InlineKeyboardBuilder()

    for category in categories:
        keyboard.row(
            types.InlineKeyboardButton(
                text=f"{category['category']} üçΩÔ∏è", callback_data=f"category_{category['category']}"
            )
        )

    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ –∫–∞—Ñ–µ! üòä\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ–Ω—é:", reply_markup=keyboard.as_markup())

@dp.callback_query(F.data.startswith("category_"))
async def handle_category(call: CallbackQuery):
    category = call.data.split("_", 1)[1]
    dishes = await get_dishes_by_category(category)
    keyboard = InlineKeyboardBuilder()

    for dish in dishes:
        keyboard.row(
            types.InlineKeyboardButton(
                text=f"{dish['name']} - {dish['price']}‚Ç∏ ü•ó", callback_data=f"dish_{dish['item_id']}"
            )
        )

    keyboard.row(
        types.InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories"),
        types.InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="checkout")
    )
    
    await call.message.edit_text(f"–í—ã —Å–º–æ—Ç—Ä–∏—Ç–µ –±–ª—é–¥–∞ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category} üçΩÔ∏è", reply_markup=keyboard.as_markup())


@dp.callback_query(F.data == "back_to_categories")
async def back_to_categories(call: CallbackQuery):
    categories = await get_categories()
    keyboard = InlineKeyboardBuilder()

    for category in categories:
        keyboard.row(
            types.InlineKeyboardButton(
                text=f"{category['category']} üç¥", callback_data=f"category_{category['category']}"
            )
        )

    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ–Ω—é: üçΩÔ∏è", reply_markup=keyboard.as_markup())




async def update_category_keyboard(call: CallbackQuery, category: str, message: str):
    dishes = await get_dishes_by_category(category)
    user_id = call.from_user.id
    cart = user_carts.get(user_id, [])

    cart_counts = {item['item_id']: item['quantity'] for item in cart}

    keyboard = InlineKeyboardBuilder()

    for dish in dishes:
        quantity = cart_counts.get(dish['item_id'], 0)
        button_text = f"{dish['name']} - {dish['price']}‚Ç∏ ü•ó {f'({quantity} —à—Ç.)' if quantity > 0 else ''}"
        keyboard.row(
            types.InlineKeyboardButton(
                text=button_text, callback_data=f"dish_{dish['item_id']}"
            )
        )

    keyboard.row(
        types.InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories"),
        types.InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="checkout")
    )

    await call.message.edit_text(f"–í—ã —Å–º–æ—Ç—Ä–∏—Ç–µ –±–ª—é–¥–∞ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category} üçΩÔ∏è", reply_markup=keyboard.as_markup())
    await call.answer(message)


@dp.callback_query(F.data.startswith("category_"))
async def handle_category(call: CallbackQuery):
    category = call.data.split("_", 1)[1]
    await update_category_keyboard(call, category, f"–í—ã —Å–º–æ—Ç—Ä–∏—Ç–µ –±–ª—é–¥–∞ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category} üçΩÔ∏è")

async def get_dishes_by_category(category):
    async with db_pool.acquire() as connection:
        return await connection.fetch("SELECT item_id, name, price, category FROM menu WHERE category = $1", category)




@dp.callback_query(F.data.startswith("dish_"))
async def handle_dish(call: CallbackQuery):
    item_id = int(call.data.split("_", 1)[1])
    user_id = call.from_user.id

    async with db_pool.acquire() as connection:
        dish = await connection.fetchrow("SELECT item_id, name, price, category FROM menu WHERE item_id = $1", item_id)

    if user_id not in user_carts:
        user_carts[user_id] = []

    found = False
    for item in user_carts[user_id]:
        if item['item_id'] == dish['item_id']:
            item['quantity'] += 1
            found = True
            break

    if not found:
        user_carts[user_id].append({
            'item_id': dish['item_id'],
            'name': dish['name'],
            'price': dish['price'],
            'quantity': 1
        })

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await update_category_keyboard(call, dish['category'], f"üéâ {dish['name']} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É! üõí")




##########################################################################################################################




async def use_customer_bonus(user_id, total_price):
    """
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–æ–Ω—É—Å—ã –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞.

    :param user_id: Telegram ID –∫–ª–∏–µ–Ω—Ç–∞
    :param total_price: –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞
    :return: (–æ—Å—Ç–∞–≤—à–∞—è—Å—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤)
    """
    async with db_pool.acquire() as connection:
        customer = await connection.fetchrow("SELECT bonus_points FROM customers WHERE telegram_id = $1", user_id)
        bonus_points = customer['bonus_points']

        used_bonus = min(bonus_points, total_price)

        await connection.execute(
            "UPDATE customers SET bonus_points = bonus_points - $1 WHERE telegram_id = $2",
            used_bonus, user_id
        )

        remaining_price = total_price - used_bonus

    return remaining_price, used_bonus




@dp.callback_query(F.data == "checkout")
async def handle_checkout(call: CallbackQuery):
    user_id = call.from_user.id
    cart = user_carts.get(user_id, [])

    if not cart:
        await call.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞! üõí", show_alert=True)
        return

    used_bonus = sum(item['price'] for item in cart if item['name'] == "–ë–æ–Ω—É—Å—ã")
    total_price = sum(item['price'] * item['quantity'] for item in cart if item['name'] != "–ë–æ–Ω—É—Å—ã")

    final_price = total_price + used_bonus 

    order_summary = "\n".join(
        f"{idx + 1}. {item['name']} x{item['quantity']} - {item['price']}‚Ç∏ (–∑–∞ —à—Ç—É–∫—É)"
        for idx, item in enumerate(cart) if item['name'] != "–ë–æ–Ω—É—Å—ã"
    )
    if used_bonus:
        order_summary += f"\n–ë–æ–Ω—É—Å—ã: {used_bonus}‚Ç∏"

    order_summary += f"\n\nüí∞ –ò—Ç–æ–≥–æ: {final_price}‚Ç∏"

    async with db_pool.acquire() as connection:
        customer = await connection.fetchrow("SELECT bonus_points FROM customers WHERE telegram_id = $1", user_id)
        available_bonuses = customer['bonus_points'] if customer else 0

    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        types.InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π kaspiüí≥", callback_data="give_paying_by_card")
    )
    keyboard.add(
        types.InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å –Ω–∞ –º–µ—Å—Ç–µ üíµ", callback_data="pay_on_site"),
    )
    if not used_bonus:  
        keyboard.row(
            types.InlineKeyboardButton(text=f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–Ω—É—Å—ã üéÅ ({available_bonuses}‚Ç∏)", callback_data="use_bonus")
        )
        keyboard.row(
        types.InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å telegram wallet‚úàÔ∏è", callback_data="give_paying_by_ton"),
    )
    keyboard.row(
        types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞ ‚ùå", callback_data="cancel_order")
    )

    await call.message.edit_text(f"üõí –í–∞—à –∑–∞–∫–∞–∑:\n{order_summary}", reply_markup=keyboard.as_markup())


@dp.callback_query(F.data == "use_bonus")
async def handle_use_bonus(call: CallbackQuery):
    user_id = call.from_user.id
    cart = user_carts.get(user_id, [])

    if not cart:
        await call.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞! üõí", show_alert=True)
        return

    total_price = sum(item['price'] for item in cart)

    remaining_price, used_bonus = await use_customer_bonus(user_id, total_price)

    cart.append({'name': '–ë–æ–Ω—É—Å—ã', 'price': -used_bonus})
    user_carts[user_id] = cart

    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        types.InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å –Ω–∞ –º–µ—Å—Ç–µ üíµ", callback_data="pay_on_site"),
    )
    keyboard.add(
        types.InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π kaspiüí≥", callback_data="give_paying_by_card")
    )
    keyboard.row(
        types.InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å telegram wallet‚úàÔ∏è", callback_data="give_paying_by_ton"),
    )
    keyboard.row(
        types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞ ‚ùå", callback_data="cancel_order")
    )

    order_summary = "\n".join(f"{idx + 1}. {item['name']} : {item['price']}‚Ç∏" for idx, item in enumerate(cart))
    order_summary += f"\n\nüí∞ –ò—Ç–æ–≥–æ —Å —É—á–µ—Ç–æ–º –±–æ–Ω—É—Å–æ–≤: {remaining_price}‚Ç∏"

    await call.message.edit_text(f"üõí –í–∞—à –∑–∞–∫–∞–∑:\n{order_summary}", reply_markup=keyboard.as_markup())


@dp.callback_query(F.data == "give_paying_by_card")
async def handle_payment_by_card(call: CallbackQuery):
    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        types.InlineKeyboardButton(text="kaspi —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã üí≥", url="https://pay.kaspi.kz/pay/17daeycr")  
    )
    keyboard.row(
        types.InlineKeyboardButton(text="–£–∂–µ –æ–ø–ª–∞—Ç–∏–ª ‚úÖ", callback_data="pay_by_card"),
        types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞ ‚ùå", callback_data="cancel_order")
    )

    await call.message.edit_text("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∏ –Ω–∞–∂–º–∏—Ç–µ '–£–∂–µ –æ–ø–ª–∞—Ç–∏–ª' –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è üí∏.", reply_markup=keyboard.as_markup())


                


@dp.callback_query(F.data == "give_paying_by_ton")
async def handle_payment_by_card(call: CallbackQuery):
    name=(await bot.get_chat(chef_chat_id)).username
    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        types.InlineKeyboardButton(text="—Ç–µ–ª–µ–≥—Ä–∞–º–º –ø–æ–≤–∞—Ä–∞",url=f"https://t.me/"+name) 
    )
    keyboard.row(
        types.InlineKeyboardButton(text="–£–∂–µ –æ–ø–ª–∞—Ç–∏–ª ‚úÖ", callback_data="pay_by_ton"),
        types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞ ‚ùå", callback_data="cancel_order")
    )

    await call.message.edit_text("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ , –æ–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ telegram wallet –∏ –Ω–∞–∂–º–∏—Ç–µ '–£–∂–µ –æ–ø–ª–∞—Ç–∏–ª' –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è üí∏.", reply_markup=keyboard.as_markup())

@dp.callback_query(F.data == "cancel_order")
async def handle_cancel_order(call: CallbackQuery):
    user_id = call.from_user.id
    if user_id in user_carts:
        del user_carts[user_id]

    categories = await get_categories()
    keyboard = InlineKeyboardBuilder()

    for category in categories:
        keyboard.row(
            types.InlineKeyboardButton(
                text=f"{category['category']} üç¥", callback_data=f"category_{category['category']}"
            )
        )

    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ–Ω—é: üçΩÔ∏è", reply_markup=keyboard.as_markup())
    await call.answer("–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω! ‚ùå", show_alert=True)



@dp.callback_query(F.data == "delete_item")
async def handle_delete_item(call: CallbackQuery):
    user_id = call.from_user.id
    cart = user_carts.get(user_id, [])

    if not cart:
        await call.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!", show_alert=True)
        return

    keyboard = InlineKeyboardBuilder()
    for idx, item in enumerate(cart):
        if idx % 2 == 0: 
            keyboard.row(
                types.InlineKeyboardButton(
                    text=f"–£–¥–∞–ª–∏—Ç—å {item['name']}", callback_data=f"remove_{idx}"
                )
            )
        else:
            keyboard.add(
                types.InlineKeyboardButton(
                    text=f"–£–¥–∞–ª–∏—Ç—å {item['name']}", callback_data=f"remove_{idx}"
                )
            )
    keyboard.row(
        types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –æ–ø–ª–∞—Ç–µ", callback_data="checkout")
    )
    keyboard.add(
        types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ", callback_data="back_to_categories")
    )

    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard.as_markup())

@dp.callback_query(F.data.startswith("remove_"))
async def handle_remove_item(call: CallbackQuery):
    user_id = call.from_user.id
    item_index = int(call.data.split("_")[1])

    if user_id in user_carts and 0 <= item_index < len(user_carts[user_id]):
        removed_item = user_carts[user_id].pop(item_index)
        await call.answer(f"–ë–ª—é–¥–æ {removed_item['name']} —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.")
    else:
        await call.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –±–ª—é–¥–æ.", show_alert=True)

    await handle_checkout(call)




##########################################################################################################################



async def add_cashback_to_customer(user_id, total_price):

    cashback = int(total_price * 0.01)  

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
    async with db_pool.acquire() as connection:
        await connection.execute(
            "UPDATE customers SET bonus_points = bonus_points + $1 WHERE telegram_id = $2",
            cashback, user_id
        )
    return cashback


@dp.callback_query(F.data == "pay_on_site")
async def handle_payment(call: CallbackQuery):
    user_id = call.from_user.id
    cart = user_carts.pop(user_id, [])
    username = call.from_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    total_price = sum(item['price'] for item in cart)

    for item in cart:
        if item['name'] != '–ë–æ–Ω—É—Å—ã':  
            await save_order(user_id, item['item_id'], item['price'])

    cashback = await add_cashback_to_customer(user_id, total_price)

    await call.answer("–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –æ–Ω –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤.")

    if chef_chat_id:
        order_summary = "\n".join(f"{item['name']} : {item['price']}‚Ç∏" for item in cart)
        keyboard = InlineKeyboardBuilder()
        keyboard.row(
            types.InlineKeyboardButton(text="–ß–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç", callback_data=f"ready_5_{user_id}"),
            types.InlineKeyboardButton(text="–ß–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç", callback_data=f"ready_10_{user_id}"),
            types.InlineKeyboardButton(text="–ß–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç", callback_data=f"ready_20_{user_id}")
        )
        keyboard.add(
            types.InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data=f"order_ready_{user_id}")
        )

        await bot.send_message(
            chef_chat_id,
            f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç @{username} (ID: {user_id}):\n{order_summary}\n\n–ò—Ç–æ–≥–æ: {total_price}‚Ç∏\n–û–ø–ª–∞—Ç–∞: –ù–∞ –º–µ—Å—Ç–µ",
            reply_markup=keyboard.as_markup()
        )

    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        types.InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∏ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="back_to_categories")
    )

    await call.message.edit_text(
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑! üòä –ü–æ–≤–∞—Ä —Å–∫–æ—Ä–æ —Å–æ–æ–±—â–∏—Ç, –∫–æ–≥–¥–∞ –≤—Å—ë –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ.\n"
        f"üí≥ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {cashback} –±–æ–Ω—É—Å–æ–≤. –ñ–µ–ª–∞–µ–º –≤–∞–º –æ—Ç–ª–∏—á–Ω–æ–≥–æ –¥–Ω—è!",
        reply_markup=keyboard.as_markup()
    )

@dp.callback_query(F.data == "pay_by_card")
async def handle_payment(call: CallbackQuery):
    username = call.from_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    user_id = call.from_user.id
    cart = user_carts.pop(user_id, [])

    total_price = sum(item['price'] for item in cart)

    for item in cart:
        if item['name'] != '–ë–æ–Ω—É—Å—ã': 
            await save_order(user_id, item['item_id'], item['price'])

    cashback = await add_cashback_to_customer(user_id, total_price)

    await call.answer("–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –æ–Ω –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤.")

    if chef_chat_id:
        order_summary = "\n".join(f"{item['name']} : {item['price']}‚Ç∏" for item in cart)
        keyboard = InlineKeyboardBuilder()
        keyboard.row(
            types.InlineKeyboardButton(text="–ß–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç", callback_data=f"ready_5_{user_id}"),
            types.InlineKeyboardButton(text="–ß–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç", callback_data=f"ready_10_{user_id}"),
            types.InlineKeyboardButton(text="–ß–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç", callback_data=f"ready_20_{user_id}")
        )
        keyboard.add(
            types.InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data=f"order_ready_{user_id}")
        )

        await bot.send_message(
            chef_chat_id,
            f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç @{username} (ID: {user_id}):\n{order_summary}\n\n–ò—Ç–æ–≥–æ: {total_price}‚Ç∏\n–û–ø–ª–∞—Ç–∞: –ö–∞—Ä—Ç–æ–π",
            reply_markup=keyboard.as_markup()
        )

    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        types.InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∏ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="back_to_categories")
    )

    await call.message.edit_text(
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑! üòä –ü–æ–≤–∞—Ä —Å–∫–æ—Ä–æ —Å–æ–æ–±—â–∏—Ç, –∫–æ–≥–¥–∞ –≤—Å—ë –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ.\n"
        f"üí≥ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {cashback} –±–æ–Ω—É—Å–æ–≤. –ñ–µ–ª–∞–µ–º –≤–∞–º –æ—Ç–ª–∏—á–Ω–æ–≥–æ –¥–Ω—è!",
        reply_markup=keyboard.as_markup()
    )

@dp.callback_query(F.data == "pay_by_ton")
async def handle_payment(call: CallbackQuery):
    username = call.from_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    user_id = call.from_user.id
    cart = user_carts.pop(user_id, [])

    total_price = sum(item['price'] for item in cart)

    for item in cart:
        if item['name'] != '–ë–æ–Ω—É—Å—ã':  
            await save_order(user_id, item['item_id'], item['price'])

    cashback = await add_cashback_to_customer(user_id, total_price)

    await call.answer("–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –æ–Ω –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤.")

    if chef_chat_id:
        order_summary = "\n".join(f"{item['name']} : {item['price']}‚Ç∏" for item in cart)
        keyboard = InlineKeyboardBuilder()
        keyboard.row(
            types.InlineKeyboardButton(text="–ß–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç", callback_data=f"ready_5_{user_id}"),
            types.InlineKeyboardButton(text="–ß–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç", callback_data=f"ready_10_{user_id}"),
            types.InlineKeyboardButton(text="–ß–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç", callback_data=f"ready_20_{user_id}")
        )
        keyboard.add(
            types.InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data=f"order_ready_{user_id}")
        )

        await bot.send_message(
            chef_chat_id,
            f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç @{username} (ID: {user_id}):\n{order_summary}\n\n–ò—Ç–æ–≥–æ: {total_price}‚Ç∏\n–û–ø–ª–∞—Ç–∞: telegram wallet",
            reply_markup=keyboard.as_markup()
        )

    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        types.InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∏ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="back_to_categories")
    )

    await call.message.edit_text(
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑! üòä –ü–æ–≤–∞—Ä —Å–∫–æ—Ä–æ —Å–æ–æ–±—â–∏—Ç, –∫–æ–≥–¥–∞ –≤—Å—ë –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ.\n"
        f"üí≥ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {cashback} –±–æ–Ω—É—Å–æ–≤. –ñ–µ–ª–∞–µ–º –≤–∞–º –æ—Ç–ª–∏—á–Ω–æ–≥–æ –¥–Ω—è!",
        reply_markup=keyboard.as_markup()
    )



@dp.callback_query(F.data.startswith("ready_"))
async def handle_ready_time(call: CallbackQuery):
    parts = call.data.split("_")
    if len(parts) != 3:
        await call.answer("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (callback).", show_alert=True)
        return

    time_option = parts[1]
    user_id = int(parts[2])

    if time_option == "5":
        await bot.send_message(user_id, "–í–∞—à –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç!")
    elif time_option == "10":
        await bot.send_message(user_id, "–í–∞—à –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç!")
    elif time_option == "20":
        await bot.send_message(user_id, "–í–∞—à –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç!")

    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        types.InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data=f"order_ready_{user_id}")
    )

    await call.message.edit_reply_markup(reply_markup=keyboard.as_markup())
    await call.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é.")

@dp.callback_query(F.data.startswith("order_ready_"))
async def handle_order_ready(call: CallbackQuery):
    parts = call.data.split("_")
    if len(parts) != 3:
        await call.answer("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ(callback)", show_alert=True)
        return

    user_id = int(parts[2])

    await bot.send_message(user_id, "–í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤! –ó–∞–±–µ—Ä–∏—Ç–µ –µ–≥–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
    await call.message.edit_text("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é.")
    await call.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é.")







##########################################################################################################################







@dp.message(Command("admin"))
async def admin_command(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")

@dp.message(F.text == "admin6421")
async def admin_login(message: Message):
    global chef_chat_id
    chef_chat_id = message.from_user.id
    await message.answer("–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö.")

@dp.callback_query(F.data.startswith("order_ready_"))
async def handle_order_ready(call: CallbackQuery):
    user_id = int(call.data.split("_", 2)[2])
    await bot.send_message(user_id, "–í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤! –ó–∞–±–µ—Ä–∏—Ç–µ –µ–≥–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
    await call.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é.")





##########################################################################################################################


offsets = {
    "menu": 0,
    "customers": 0,
    "orders": 0
}
LIMIT = 20  

def create_navigation_keyboard(table_name):
    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        types.InlineKeyboardButton(text="–ü—Ä–µ–¥—ã–¥—É—â–∏–µ 20", callback_data=f"{table_name}_prev"),
        types.InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∏–µ 20", callback_data=f"{table_name}_next")
    )
    return keyboard

@dp.message(Command("show_menu"))
async def show_menu_command(message: Message):
        async with db_pool.acquire() as connection:
            data = await connection.fetch("SELECT * FROM menu OFFSET $1 LIMIT $2", offsets["menu"], LIMIT)
        
        if not data:
            await message.answer("–í —Ç–∞–±–ª–∏—Ü–µ 'menu' –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
            return

        response = "–î–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã 'menu':\n"
        for item in data:
            response += f"{item['item_id']}: {item['name']} ({item['category']}) - {item['price']}‚Ç∏\n"

        keyboard = create_navigation_keyboard("menu")
        await message.answer(response, reply_markup=keyboard.as_markup())


@dp.message(Command("show_customers"))
async def show_customers_command(message: Message):

        async with db_pool.acquire() as connection:
            data = await connection.fetch("SELECT * FROM customers OFFSET $1 LIMIT $2", offsets["customers"], LIMIT)
        
        if not data:
            await message.answer("–í —Ç–∞–±–ª–∏—Ü–µ 'customers' –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
            return

        response = "–î–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã 'customers':\n"
        for customer in data:
            response += f"ID: {customer['customer_id']}, Telegram ID: {customer['telegram_id']}, –ó–∞–∫–∞–∑—ã: {customer['order_count']}, –ë–æ–Ω—É—Å—ã: {customer['bonus_points']}\n"

        keyboard = create_navigation_keyboard("customers")
        await message.answer(response, reply_markup=keyboard.as_markup())


@dp.message(Command("show_orders"))
async def show_orders_command(message: Message):

        async with db_pool.acquire() as connection:
            data = await connection.fetch("SELECT * FROM orders OFFSET $1 LIMIT $2", offsets["orders"], LIMIT)
        
        if not data:
            await message.answer("–í —Ç–∞–±–ª–∏—Ü–µ 'orders' –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
            return

        response = "–î–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã 'orders':\n"
        for order in data:
            response += f"ID –∑–∞–∫–∞–∑–∞: {order['order_id']}, ID –∫–ª–∏–µ–Ω—Ç–∞: {order['customer_id']}, –ü–æ–∑–∏—Ü–∏—è: {order['menu_item_id']}, –¶–µ–Ω–∞: {order['order_price']}‚Ç∏, –î–∞—Ç–∞: {order['order_datetime']}\n"

        keyboard = create_navigation_keyboard("orders")
        await message.answer(response, reply_markup=keyboard.as_markup())


@dp.callback_query(F.data.endswith("_prev") | F.data.endswith("_next"))
async def handle_navigation(call: CallbackQuery):
    table_name = call.data.split("_")[0]
    direction = call.data.split("_")[1]

    if direction == "next":
        offsets[table_name] += LIMIT
    elif direction == "prev" and offsets[table_name] >= LIMIT:
        offsets[table_name] -= LIMIT

    if table_name == "menu":
        await show_menu_command(call.message)
    elif table_name == "customers":
        await show_customers_command(call.message)
    elif table_name == "orders":
        await show_orders_command(call.message)

    await call.answer("")


##########################################################################################################################





@dp.message(Command("inject1"))
async def inject_sql_command(message: Message):
    sql_code = """
INSERT INTO menu (name, category, price, rating) VALUES

    ('–°—ã—Ä', '–°–µ–Ω–¥–≤–∏—á–∏', 60, 0),
    ('–ú–æ—Ü–∞—Ä–µ–ª–ª–∞', '–°–µ–Ω–¥–≤–∏—á–∏', 60, 0),
    ('–°—ã—Ä–Ω—ã–π —Å–æ—É—Å', '–°–µ–Ω–¥–≤–∏—á–∏', 100, 0),
    ('–•–∞–ª–∞–ø–µ–Ω—å—é', '–°–µ–Ω–¥–≤–∏—á–∏', 50, 0),
    ('–°–æ–ª–µ–Ω–Ω—ã–µ –æ–≥—É—Ä—Ü—ã', '–°–µ–Ω–¥–≤–∏—á–∏', 50, 0),
    ('–û–≥—É—Ä—Ü—ã', '–°–µ–Ω–¥–≤–∏—á–∏', 50, 0),
    ('–ü–æ–º–∏–¥–æ—Ä—ã', '–°–µ–Ω–¥–≤–∏—á–∏', 60, 0);

    """
    
    try:
        async with db_pool.acquire() as connection:
            await connection.execute(sql_code)
            await message.answer("SQL-–∫–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ SQL-–∫–æ–¥–∞:\n{e}")











async def on_startup():
    global db_pool
    db_pool = await create_db_pool()
    print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

async def main():
    await on_startup()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())


   